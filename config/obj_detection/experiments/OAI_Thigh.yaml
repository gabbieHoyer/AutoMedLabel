model: YOLO8/yolov8n.pt
model_type: YOLO
data_yaml: thigh_data.yaml
imgsz: [512, 256]
epochs: 1 #300
batch: 16
rect: true

best_weights: runs/detect/train/weights/best.pt

data: datasets/intubation_videos/20201012-150355.avi


# resources for this development:

# https://docs.ultralytics.com/usage/engine/#other-engine-components
# https://docs.ultralytics.com/usage/engine/

# https://www.reddit.com/r/pytorch/comments/tl1a7f/yolo_annotated_dataset_to_custom_dataloader/


# Yes, it's definitely possible to define custom DataLoader and Augmentation pipelines in DetectionTrainer! ðŸš€ To do so, you'd primarily override the get_dataloader() method in a subclass of DetectionTrainer. Here's a brief example on how you might go about customizing your DataLoader:

# from ultralytics.models.yolo.detect import DetectionTrainer

# class CustomTrainer(DetectionTrainer):
#     def get_dataloader(self, ...):
#         # Your custom DataLoader logic here
#         ...



# from ultralytics.models.yolo.detect import DetectionTrainer


# class CustomTrainer(DetectionTrainer):
#     def get_model(self, cfg, weights):
#         """Loads a custom detection model given configuration and weight files."""
#         ...


# trainer = CustomTrainer(overrides={...})
# trainer.train()




# from ultralytics.models.yolo.detect import DetectionTrainer
# from ultralytics.nn.tasks import DetectionModel


# class MyCustomModel(DetectionModel):
#     def init_criterion(self):
#         """Initializes the loss function and adds a callback for uploading the model to Google Drive every 10 epochs."""
#         ...


# class CustomTrainer(DetectionTrainer):
#     def get_model(self, cfg, weights):
#         """Returns a customized detection model instance configured with specified config and weights."""
#         return MyCustomModel(...)


# # callback to upload model weights
# def log_model(trainer):
#     """Logs the path of the last model weight used by the trainer."""
#     last_weight_path = trainer.last
#     print(last_weight_path)


# trainer = CustomTrainer(overrides={...})
# trainer.add_callback("on_train_epoch_end", log_model)  # Adds to existing callback
# trainer.train()