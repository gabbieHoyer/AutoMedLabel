model: YOLO8/yolov8n.pt
model_type: YOLO
data_yaml: thigh_data_plus.yaml
# imgsz: [1024, 512]  # technically this is variable :/ three different variations exist in thigh oai dataset
imgsz: 1024
epochs: 100
batch: 8 #1 #2 #4 #8 #16
rect: False
workers: 4 #1 
# multi_scale: True

# best_weights: runs/detect/train/weights/best.pt
# best_weights: work_dir/obj_detection/runs/detect/train17/weights/best.pt
# best_weights: work_dir/obj_detection/runs/detect/train18/weights/best.pt
# best_weights: work_dir/obj_detection/runs/detect/train7/weights/best.pt
best_weights: work_dir/obj_detection/runs/detect/train30/weights/best.pt

data: standardized_data/dpr/thigh_npy3_instance/test/images/OAI_9437407-003.npy





# source: # (str, optional) source directory for images or videos
# vid_stride: 1 # (int) video frame-rate stride
# stream_buffer: False # (bool) buffer all streaming frames (True) or return the most recent frame (False)
# visualize: False # (bool) visualize model features
# augment: False # (bool) apply image augmentation to prediction sources
# agnostic_nms: False # (bool) class-agnostic NMS
# classes: # (int | list[int], optional) filter results by class, i.e. classes=0, or classes=[0,2,3]
# retina_masks: False # (bool) use high-resolution segmentation masks
# embed: # (list[int], optional) return feature vectors/embeddings from given layers


# see if prediction can take place on folder in images??





# resources for this development:

# https://docs.ultralytics.com/usage/engine/#other-engine-components
# https://docs.ultralytics.com/usage/engine/

# https://www.reddit.com/r/pytorch/comments/tl1a7f/yolo_annotated_dataset_to_custom_dataloader/


# Yes, it's definitely possible to define custom DataLoader and Augmentation pipelines in DetectionTrainer! ðŸš€ To do so, you'd primarily override the get_dataloader() method in a subclass of DetectionTrainer. Here's a brief example on how you might go about customizing your DataLoader:

# from ultralytics.models.yolo.detect import DetectionTrainer

# class CustomTrainer(DetectionTrainer):
#     def get_dataloader(self, ...):
#         # Your custom DataLoader logic here
#         ...



# from ultralytics.models.yolo.detect import DetectionTrainer


# class CustomTrainer(DetectionTrainer):
#     def get_model(self, cfg, weights):
#         """Loads a custom detection model given configuration and weight files."""
#         ...


# trainer = CustomTrainer(overrides={...})
# trainer.train()




# from ultralytics.models.yolo.detect import DetectionTrainer
# from ultralytics.nn.tasks import DetectionModel


# class MyCustomModel(DetectionModel):
#     def init_criterion(self):
#         """Initializes the loss function and adds a callback for uploading the model to Google Drive every 10 epochs."""
#         ...


# class CustomTrainer(DetectionTrainer):
#     def get_model(self, cfg, weights):
#         """Returns a customized detection model instance configured with specified config and weights."""
#         return MyCustomModel(...)


# # callback to upload model weights
# def log_model(trainer):
#     """Logs the path of the last model weight used by the trainer."""
#     last_weight_path = trainer.last
#     print(last_weight_path)


# trainer = CustomTrainer(overrides={...})
# trainer.add_callback("on_train_epoch_end", log_model)  # Adds to existing callback
# trainer.train()