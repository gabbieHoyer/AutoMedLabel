## mskSAM Dataset Pre-Processing Parameters
## Params for:
##     1. data_standardization.py: data standardization of input image and mask file
##     2. metadata_extraction.py: standardize metadata for statistics
##     3. sam_prep.py: SAM compatible npy data standardization and slice-level metadata creation
##     4. prompt_prediction.py: extended functionality for choosing prompt experimentation / zeroshot inference


# ------------------ PARAMS FOR ALL ------------------
dataset:
  name: OAI_imorphics
  description: "3.0T 3D DESS knee dataset with bone and cartilage masks."

overwrite_existing_flag: True

# When you want to force processing of all files as DICOM - needed for OAI since dicom files lack extension
no_dicom_extension_flag: True

# --- OUTPUT (DEFAULT): uses default folder structure when output path is not specified (see load_config())
# default_output_dir: /data/bigbone3/ghoyer
default_output_dir: /data/mskscratch/users/ghoyer/knee_pipeline
general_data_dir: ${default_output_dir}/standardized_knee/OAI/knee/3D_DESS/Imorphics
        
# ------------------ INFO FOR DATA STANDARDIZATION ------------------
# Packaged MRI image and mask folder paths (can be dicom or other file type)
image_data_paths: ${general_data_dir}/dataframes/oai_imorphics_dicom_mask_paths.csv
mask_data_paths: ${general_data_dir}/dataframes/oai_imorphics_dicom_mask_paths.csv

image_column: SAG_3D_DESS #.dcms
mask_column: imorphics_V00_mat #.mat

image_config:
  key: 
  transforms:
  data_properties:
    finite_values: True

mask_config: 
  key: datastruct
  transforms:
    extract_imorphics_mask: ''
    transpose: [2, 0, 1]
    dtype: np.uint8
  data_properties:
    finite_values: True
    type: int8
    number_unique_values: 7

## details about your dataset:
mask_labels:
  0: background
  1: femoral cartilage
  2: lateral tibial cartilage
  3: medial tibial cartilage
  4: patellar cartilage
  5: lateral meniscus
  6: medial meniscus

# --- OUTPUT (OVERRIDE DEFAULT): location to Output/locate nifti files for MRI images and masks
nifti_image_dir: ${general_data_dir}/nifti/imgs
nifti_mask_dir: ${general_data_dir}/nifti/masks

# ------------------ VISUALIZE NIFTI ------------------
nifti_fig_cfg:
  fig_type: 2D_overlay # Options: '2D_overlay', 'gif', ['2D_overlay', 'gif']
  num_figs: 5  # Number of files to randomly select and process
  slice_selection: 'with_segmentation' # 'any' 'with_segmentation'
# --- OUTPUT (OVERRIDE DEFAULT): location to save figures
  fig_path: ${general_data_dir}/nifti/figs

# ------------------ INFO FOR SAM PREP ------------------
## SAM compatible npy data standardization and slice-level metadata creation
# Values for image preprocessing script
preprocessing_cfg:
  image_size: 1024
  voxel_num_thre2d: 100
  voxel_num_thre3d: 1000
  remove_label_ids: []  # No labels to remove in this configuration
  target_label_id: null  # No specific label targeted for instance segmentation
  instance_bbox: False
  yolo_compatible: True

# --- OUTPUT (OVERRIDE DEFAULT): Location to output SAM-compatible .npy files
npy_dir: ${general_data_dir}/npy/SAM

# ------------------ VISUALIZE NPY ------------------
npy_fig_cfg:
  fig_type: 2D_overlay # Options: '2D_overlay', 'gif', ['2D_overlay', 'gif']
  num_figs: 10  # Number of files to randomly select and process
  slice_selection: 'any' # 'any' 'with_segmentation'
# --- OUTPUT (OVERRIDE DEFAULT): location to save figures
  fig_path: ${npy_dir}/figs

# ------------------ INFO FOR METADATA EXTRACTION ------------------
# Original MRI dicom image folder path
mri_dicom_dir: ${image_data_paths}
dicom_column: SAG_3D_DESS

metadata_cfg:
  ## details about your dataset:
  dataset_name: ${dataset.name}
  anatomy: 'knee'
  field_strength: '3.0'
  mri_sequence: '3D_DESS'

  ## MRI dicom header info to extract for statistics metadata:
  dicom_values:
    AccessionNumber: AccessionNumber
    SOPInstanceUID: SOPInstanceUID
    StudyInstanceUID: StudyInstanceUID
    SeriesInstanceUID: SeriesInstanceUID
    series_desc: SeriesDescription
    study_desc: StudyDescription
    TE: EchoTime
    TR: RepetitionTime
    flip_angle: FlipAngle
    ETL: EchoTrainLength
    field_strength: MagneticFieldStrength
    scanner_model: ManufacturerModelName
    slice_thickness: SliceThickness
    pixel_spacing: PixelSpacing
    rows: Rows
    columns: Columns
    instanceNumber: InstanceNumber  

# Operation A (Optional) 
# Path to a table/dataframe for demographic or other info desired for metadata:
extra_metadata_cfg:
  csv_file_path: ${general_data_dir}/dataframes/oai_demos.csv
  subject_id_col: 'subject_id'
  column_mapping: # Standardized: Actual
    Age: 'age'  
    Sex: 'gender'
    Race: 'race'
    Hisp: 'hisp'
    Weight: 'weight'
    Height: 'height'
    BMI: 'BMI'
    OA_inc: 'oa_prog'
    TKR: 'tkr'
    # Add more mappings as needed

# Operation B (Optional) 
# JSON dictionary to provide supplementary info (demographics, imaging parameters) - default is our stats file
additional_metadata_file: ${general_data_dir}/metadata/volume_metadata_for_stats.json

# --- OUTPUTS (OVERRIDE DEFAULT): 
# Operation A - location for Statistics slice-level information
stats_metadata_file: ${general_data_dir}/metadata/volume_metadata_for_stats.json
# Operation B - location of subject-level metadata used for training
ml_metadata_file: ${general_data_dir}/metadata/volume_metadata_for_ml.json
# Operation C - location to parquet files for ML
slice_info_parquet_dir: ${general_data_dir}/metadata/SAM/slice_paths
# Operation D - location for text file of dicom metadata from one file
dicom_metadata_file: ${general_data_dir}/metadata/dicom_metadata_summary.csv

# ------------------ Prompting Experimentation ------------------
prompt_experiment: 
  config: baseline_prompt.yaml